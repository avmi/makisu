// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/uber/makisu/lib/registry (interfaces: Client)

// Package mockregistry is a generated GoMock package.
package mockregistry

import (
	gomock "github.com/golang/mock/gomock"
	image "github.com/uber/makisu/lib/docker/image"
	os "os"
	reflect "reflect"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Pull mocks base method
func (m *MockClient) Pull(arg0 string) (*image.DistributionManifest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pull", arg0)
	ret0, _ := ret[0].(*image.DistributionManifest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Pull indicates an expected call of Pull
func (mr *MockClientMockRecorder) Pull(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pull", reflect.TypeOf((*MockClient)(nil).Pull), arg0)
}

// PullImageConfig mocks base method
func (m *MockClient) PullImageConfig(arg0 image.Digest) (os.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PullImageConfig", arg0)
	ret0, _ := ret[0].(os.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PullImageConfig indicates an expected call of PullImageConfig
func (mr *MockClientMockRecorder) PullImageConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PullImageConfig", reflect.TypeOf((*MockClient)(nil).PullImageConfig), arg0)
}

// PullLayer mocks base method
func (m *MockClient) PullLayer(arg0 image.Digest) (os.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PullLayer", arg0)
	ret0, _ := ret[0].(os.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PullLayer indicates an expected call of PullLayer
func (mr *MockClientMockRecorder) PullLayer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PullLayer", reflect.TypeOf((*MockClient)(nil).PullLayer), arg0)
}

// PullManifest mocks base method
func (m *MockClient) PullManifest(arg0 string) (*image.DistributionManifest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PullManifest", arg0)
	ret0, _ := ret[0].(*image.DistributionManifest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PullManifest indicates an expected call of PullManifest
func (mr *MockClientMockRecorder) PullManifest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PullManifest", reflect.TypeOf((*MockClient)(nil).PullManifest), arg0)
}

// Push mocks base method
func (m *MockClient) Push(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Push", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Push indicates an expected call of Push
func (mr *MockClientMockRecorder) Push(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockClient)(nil).Push), arg0)
}

// PushImageConfig mocks base method
func (m *MockClient) PushImageConfig(arg0 image.Digest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PushImageConfig", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PushImageConfig indicates an expected call of PushImageConfig
func (mr *MockClientMockRecorder) PushImageConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushImageConfig", reflect.TypeOf((*MockClient)(nil).PushImageConfig), arg0)
}

// PushLayer mocks base method
func (m *MockClient) PushLayer(arg0 image.Digest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PushLayer", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PushLayer indicates an expected call of PushLayer
func (mr *MockClientMockRecorder) PushLayer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushLayer", reflect.TypeOf((*MockClient)(nil).PushLayer), arg0)
}

// PushManifest mocks base method
func (m *MockClient) PushManifest(arg0 string, arg1 *image.DistributionManifest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PushManifest", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PushManifest indicates an expected call of PushManifest
func (mr *MockClientMockRecorder) PushManifest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushManifest", reflect.TypeOf((*MockClient)(nil).PushManifest), arg0, arg1)
}
